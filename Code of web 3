import React, { useState, useEffect, useCallback, useMemo } from 'react';

// Import Firebase modules for a modern React setup
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, orderBy } from 'firebase/firestore';

// --- Firebase Configuration from Environment Variables ---
// These will be replaced by Vercel's environment variables at build time.
// For local development, you might need a .env file or hardcode for testing.
const FIREBASE_CONFIG = process.env.NEXT_PUBLIC_FIREBASE_CONFIG ? JSON.parse(process.env.NEXT_PUBLIC_FIREBASE_CONFIG) : null;
const APP_ID = process.env.NEXT_PUBLIC_APP_ID || 'default-car-marketplace-app-id';
const INITIAL_AUTH_TOKEN = process.env.NEXT_PUBLIC_INITIAL_AUTH_TOKEN || null;

// Initialize Firebase only once
let app, dbInstance, authInstance;
if (FIREBASE_CONFIG) {
    app = initializeApp(FIREBASE_CONFIG);
    dbInstance = getFirestore(app);
    authInstance = getAuth(app);
}

// Custom hook for Firebase initialization and user state
const useFirebase = () => {
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [userId, setUserId] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);

    useEffect(() => {
        if (!FIREBASE_CONFIG) {
            console.warn("Firebase configuration is missing. Using mock data and local user ID.");
            setDb(null); // Explicitly set to null if config missing
            setAuth(null);
            setUserId('MOCK_USER_ID_' + Math.random().toString(36).substring(2, 9)); // Random mock ID
            setIsAuthReady(true);
            return;
        }

        setDb(dbInstance);
        setAuth(authInstance);

        const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
            if (user) {
                setUserId(user.uid);
            } else {
                try {
                    // Attempt custom token sign-in first, then anonymous
                    if (INITIAL_AUTH_TOKEN) {
                        await signInWithCustomToken(authInstance, INITIAL_AUTH_TOKEN);
                    } else {
                        await signInAnonymously(authInstance);
                    }
                } catch (error) {
                    console.error("Firebase Auth Error:", error);
                    // Fallback to a local user ID if auth fails
                    setUserId('AUTH_FAILED_USER_' + Math.random().toString(36).substring(2, 9));
                }
            }
            setIsAuthReady(true);
        });

        return () => unsubscribe();
    }, []); // Only run once on mount

    return { db, auth, userId, isAuthReady };
};

// --- Mock Data (for development or if Firebase is not configured) ---
const MOCK_CARS = [
    { id: 'mock-1', make: 'Toyota', model: 'Camry', year: 2021, price: 26500, color: 'Blue', mileage: 22000, description: 'Economical and reliable sedan. Great condition.', isSold: false, sellerId: 'MOCK_USER_ID_EXAMPLE', timestamp: new Date(Date.now() - 86400000) },
    { id: 'mock-2', make: 'Honda', model: 'Civic', year: 2019, price: 20000, color: 'White', mileage: 35000, description: 'Sporty compact, excellent fuel efficiency.', isSold: false, sellerId: 'MOCK_USER_ID_EXAMPLE', timestamp: new Date(Date.now() - 172800000) },
    { id: 'mock-3', make: 'BMW', model: 'X5', year: 2022, price: 55000, color: 'Black', mileage: 15000, description: 'Luxury SUV with M-Sport package, low miles.', isSold: true, sellerId: 'MOCK_USER_ID_EXAMPLE', timestamp: new Date(Date.now() - 259200000) },
    { id: 'mock-4', make: 'Tesla', model: 'Model Y', year: 2023, price: 48000, color: 'Grey', mileage: 8000, description: 'Long-range electric, advanced autopilot features.', isSold: false, sellerId: 'MOCK_USER_ID_EXAMPLE', timestamp: new Date(Date.now() - 345600000) },
];

// --- Components ---

// Car Listing Form
const CarForm = ({ db, userId, onCarAdded, editingCar, setEditingCar }) => {
    const initialFormState = { make: '', model: '', year: '', price: '', color: '', mileage: '', description: '' };
    const [formData, setFormData] = useState(initialFormState);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState(null);

    // Populate form if editing an existing car
    useEffect(() => {
        if (editingCar) {
            setFormData({
                ...editingCar,
                year: String(editingCar.year),
                price: String(editingCar.price),
                mileage: String(editingCar.mileage)
            });
        } else {
            setFormData(initialFormState);
        }
    }, [editingCar]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null);

        if (!db) {
            alert("Firebase not configured. Form submission ignored (using mock data).");
            setEditingCar(null);
            onCarAdded(); // Trigger list refresh for mock
            return;
        }

        setIsSubmitting(true);
        try {
            const carData = {
                ...formData,
                year: parseInt(formData.year, 10),
                price: parseFloat(formData.price),
                mileage: parseInt(formData.mileage, 10),
                isSold: editingCar ? editingCar.isSold : false, // Preserve status if editing
                sellerId: userId,
                timestamp: new Date(),
            };

            const collectionPath = `/artifacts/${APP_ID}/public/data/cars`;
            const carsCollection = collection(db, collectionPath);

            if (editingCar && editingCar.id) {
                await setDoc(doc(carsCollection, editingCar.id), carData, { merge: true });
                setEditingCar(null); // Clear editing state
            } else {
                await addDoc(carsCollection, carData);
            }

            setFormData(initialFormState); // Reset form
            onCarAdded(); // Trigger refresh in parent
        } catch (e) {
            console.error("Error adding/updating document: ", e);
            setError("Failed to save car. Please check console for details.");
        } finally {
            setIsSubmitting(false);
        }
    };

    const isEditMode = !!editingCar;

    return (
        <div className="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
            <h2 className="text-2xl font-bold text-gray-800 mb-6 border-b pb-2">
                {isEditMode ? 'Edit Car Listing' : 'List Your Car'}
            </h2>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label htmlFor="make" className="block text-sm font-medium text-gray-700">Make</label>
                        <input type="text" id="make" name="make" value={formData.make} onChange={handleChange} required
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="e.g., Toyota" />
                    </div>
                    <div>
                        <label htmlFor="model" className="block text-sm font-medium text-gray-700">Model</label>
                        <input type="text" id="model" name="model" value={formData.model} onChange={handleChange} required
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="e.g., Corolla" />
                    </div>
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div>
                        <label htmlFor="year" className="block text-sm font-medium text-gray-700">Year</label>
                        <input type="number" id="year" name="year" value={formData.year} onChange={handleChange} required min="1900" max={new Date().getFullYear() + 1}
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="2020" />
                    </div>
                    <div>
                        <label htmlFor="price" className="block text-sm font-medium text-gray-700">Price ($)</label>
                        <input type="number" id="price" name="price" value={formData.price} onChange={handleChange} required min="0" step="100"
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="25000" />
                    </div>
                    <div>
                        <label htmlFor="mileage" className="block text-sm font-medium text-gray-700">Mileage (Miles)</label>
                        <input type="number" id="mileage" name="mileage" value={formData.mileage} onChange={handleChange} required min="0"
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="50000" />
                    </div>
                    <div>
                        <label htmlFor="color" className="block text-sm font-medium text-gray-700">Color</label>
                        <input type="text" id="color" name="color" value={formData.color} onChange={handleChange} required
                            className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="e.g., Black" />
                    </div>
                </div>

                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
                    <textarea id="description" name="description" rows="3" value={formData.description} onChange={handleChange} required
                        className="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 border" placeholder="Briefly describe the car's condition, features, and history."></textarea>
                </div>

                {error && <p className="text-red-500 text-sm italic">{error}</p>}

                <div className="flex space-x-4">
                     <button type="submit" disabled={isSubmitting}
                        className={`w-full md:w-auto inline-flex justify-center py-3 px-6 border border-transparent shadow-sm text-sm font-medium rounded-xl text-white transition duration-300 ${isSubmitting ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'}`}>
                        {isSubmitting ? 'Saving...' : (isEditMode ? 'Update Listing' : 'List Car')}
                    </button>
                    {isEditMode && (
                        <button type="button" onClick={() => setEditingCar(null)}
                            className="w-full md:w-auto inline-flex justify-center py-3 px-6 border border-gray-300 shadow-sm text-sm font-medium rounded-xl text-gray-700 bg-white hover:bg-gray-50 transition duration-300">
                            Cancel Edit
                        </button>
                    )}
                </div>
            </form>
        </div>
    );
};

// Car Display Card
const CarCard = ({ car, userId, onEdit, onToggleSold, onDelete }) => {
    const isSeller = car.sellerId === userId;

    const makeInitial = car.make ? car.make.substring(0, 1).toUpperCase() : 'N';
    const modelInitial = car.model ? car.model.substring(0, 1).toUpperCase() : 'A';
    const placeholderText = `${makeInitial}${modelInitial}`;
    const placeholderUrl = `https://placehold.co/400x200/4f46e5/ffffff?text=${placeholderText}&font=inter`;

    const handleDeleteClick = () => {
        if (window.confirm("Are you sure you want to delete this listing?")) {
            onDelete(car.id);
        }
    };

    return (
        <div className={`bg-white rounded-xl shadow-lg overflow-hidden transition-all duration-300 border border-gray-200 ${car.isSold ? 'opacity-70 grayscale' : 'hover:shadow-xl'}`}>
            <div className="relative">
                <img src={placeholderUrl} alt={`${car.year} ${car.make} ${car.model}`} className="w-full h-48 object-cover" onError={(e) => e.target.style.display='none'} />
                <div className={`absolute top-0 right-0 p-2 text-xs font-bold text-white rounded-bl-lg ${car.isSold ? 'bg-red-600' : 'bg-green-600'}`}>
                    {car.isSold ? 'SOLD' : 'AVAILABLE'}
                </div>
                <div className="absolute top-0 left-0 p-2">
                    <span className="bg-indigo-500 text-white text-xs font-semibold px-2.5 py-1 rounded-full">{car.year}</span>
                </div>
            </div>
            <div className="p-4 space-y-3">
                <h3 className="text-xl font-extrabold text-gray-900">{car.make} {car.model}</h3>
                <p className="text-sm font-medium text-gray-500">
                    {car.mileage.toLocaleString()} miles | {car.color}
                </p>
                <p className="text-3xl font-bold text-indigo-600">${car.price.toLocaleString()}</p>
                <p className="text-gray-600 text-sm line-clamp-2">{car.description}</p>
                
                {isSeller && (
                    <div className="pt-3 border-t mt-4 flex justify-between space-x-2">
                        <button onClick={() => onEdit(car)}
                            className="flex-1 py-2 text-sm font-medium rounded-lg text-white bg-blue-500 hover:bg-blue-600 transition duration-150">
                            Edit
                        </button>
                        <button onClick={() => onToggleSold(car)}
                            className={`flex-1 py-2 text-sm font-medium rounded-lg text-white transition duration-150 ${car.isSold ? 'bg-yellow-500 hover:bg-yellow-600' : 'bg-purple-500 hover:bg-purple-600'}`}>
                            {car.isSold ? 'Mark Available' : 'Mark Sold'}
                        </button>
                        <button onClick={handleDeleteClick}
                            className="flex-1 py-2 text-sm font-medium rounded-lg text-white bg-red-500 hover:bg-red-600 transition duration-150">
                            Delete
                        </button>
                    </div>
                )}
                {/* <p className="text-xs text-center pt-2 text-gray-400">Seller ID: {car.sellerId}</p> */}
            </div>
        </div>
    );
};

// Car Listings Display
const CarList = ({ db, userId, onCarAction, setEditingCar }) => {
    const [cars, setCars] = useState(MOCK_CARS);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    const isFirebaseAvailable = !!db;

    const handleDbAction = useCallback(async (carId, updates, actionType) => {
         if (!isFirebaseAvailable) {
            console.warn(`Firebase not configured. Mock action: ${actionType} on ${carId}.`);
            // For mock data, you'd manually update state here
            setCars(prevCars => {
                if (actionType === 'delete') return prevCars.filter(car => car.id !== carId);
                if (actionType === 'update') return prevCars.map(car => car.id === carId ? { ...car, ...updates } : car);
                return prevCars;
            });
            return;
        }

        try {
            const collectionPath = `/artifacts/${APP_ID}/public/data/cars`;
            const carRef = doc(db, collectionPath, carId);

            if (actionType === 'delete') {
                await deleteDoc(carRef);
            } else if (actionType === 'update') {
                 await updateDoc(carRef, updates);
            }
        } catch (e) {
            console.error(`Error performing ${actionType} action: `, e);
            setError(`Failed to perform action: ${actionType}.`);
        }
    }, [db, isFirebaseAvailable]); // Only recreate if db or availability changes

    const toggleSold = useCallback((car) => {
        if (!car.id || car.sellerId !== userId) {
            alert("You can only edit your own listings.");
            return;
        }
        const updates = { isSold: !car.isSold };
        handleDbAction(car.id, updates, 'update');
    }, [userId, handleDbAction]);

    const deleteCar = useCallback((carId) => {
        if (isFirebaseAvailable && !userId) { // If Firebase is used, ensure user ID is present
            alert("Authentication failed or not ready. Cannot delete.");
            return;
        }
        // For mock data, we allow deletion by anyone with the current mock ID.
        // For real Firebase, ensure sellerId matches userId.
        const carToDelete = cars.find(c => c.id === carId);
        if (carToDelete && carToDelete.sellerId !== userId) {
             alert("You can only delete your own listings.");
             return;
        }
        handleDbAction(carId, {}, 'delete');
    }, [userId, isFirebaseAvailable, cars, handleDbAction]);


    useEffect(() => {
        if (!isFirebaseAvailable) {
            setIsLoading(false);
            return;
        }

        setIsLoading(true);
        setError(null);

        const collectionPath = `/artifacts/${APP_ID}/public/data/cars`;
        const carsCollection = collection(db, collectionPath);
        const q = query(carsCollection, orderBy('timestamp', 'desc')); // Order by newest first

        const unsubscribe = onSnapshot(q, (snapshot) => {
            const fetchedCars = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data(),
                year: Number(doc.data().year),
                price: Number(doc.data().price),
                mileage: Number(doc.data().mileage),
                timestamp: doc.data().timestamp?.toDate(), // Convert Firestore timestamp to Date object
            }));
            setCars(fetchedCars);
            setIsLoading(false);
        }, (e) => {
            console.error("Firestore snapshot error:", e);
            setError("Could not load data. Check network and console.");
            setIsLoading(false);
        });

        return () => unsubscribe();
    }, [db, isFirebaseAvailable, onCarAction]); // Re-fetch if db instance or explicit trigger changes

    if (isLoading) {
        return <div className="text-center p-8 text-gray-500">Loading listings...</div>;
    }

    if (error) {
        return <div className="text-center p-8 text-red-500">Error: {error}</div>;
    }

    return (
        <div className="space-y-6">
            <h2 className="text-3xl font-extrabold text-gray-800">Available Listings ({cars.length})</h2>
            {cars.length === 0 ? (
                <p className="text-center p-10 text-gray-500 bg-white rounded-xl shadow-lg border border-gray-200">
                    No cars are currently listed. Be the first to list yours!
                </p>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                    {cars.map(car => (
                        <CarCard
                            key={car.id}
                            car={car}
                            userId={userId}
                            onEdit={setEditingCar}
                            onToggleSold={toggleSold}
                            onDelete={deleteCar}
                        />
                    ))}
                </div>
            )}
        </div>
    );
};

// Main Application Component
export const App = () => {
    const { db, auth, userId, isAuthReady } = useFirebase();
    const [editingCar, setEditingCar] = useState(null);
    const [carActionTrigger, setCarActionTrigger] = useState(0); // Used to force list refresh

    const handleCarAction = useCallback(() => {
        setCarActionTrigger(prev => prev + 1);
    }, []);

    const userIdentifier = useMemo(() => {
        if (!isAuthReady) return 'Connecting...';
        if (userId && userId.startsWith('MOCK_USER_ID')) return 'Mock User';
        if (userId && userId.startsWith('AUTH_FAILED_USER')) return 'Auth Failed';
        return userId ? `${userId.substring(0, 8)}...` : 'N/A';
    }, [isAuthReady, userId]);

    return (
        <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-200 p-4 md:p-8 font-inter">
            <header className="flex flex-col md:flex-row justify-between items-center bg-white p-6 rounded-xl shadow-xl mb-8 border border-gray-200">
                <h1 className="text-3xl font-extrabold text-indigo-700">Pinnacle Auto Market</h1>
                <div className="text-sm mt-3 md:mt-0 bg-gray-100 p-2 rounded-lg text-gray-600 font-mono">
                    User: <span className="font-semibold text-gray-800">{userIdentifier}</span>
                </div>
            </header>

            <main className="space-y-10">
                {isAuthReady ? (
                    <>
                        <CarForm db={db} userId={userId} onCarAdded={handleCarAction} editingCar={editingCar} setEditingCar={setEditingCar} />
                        <CarList db={db} userId={userId} onCarAction={carActionTrigger} setEditingCar={setEditingCar} />
                    </>
                ) : (
                    <div className="text-center p-20 bg-white rounded-xl shadow-lg border border-gray-200">
                        <p className="text-lg font-semibold text-indigo-600">Connecting to the marketplace...</p>
                        <p className="text-gray-500 text-sm mt-2">Please wait while we initialize Firebase services.</p>
                    </div>
                )}
            </main>

            <footer className="text-center text-gray-500 text-sm mt-10 p-4 border-t border-gray-300">
                Powered by React, Tailwind CSS, and Firestore.
            </footer>
        </div>
    );
};

export default App;

